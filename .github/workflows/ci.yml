name: CI

on: [push]

env:
  TZ: UTC
  CI: true
  NODE_ENV: ci
  AWS_KEY: ${{ secrets.AWS_KEY }}
  AWS_SECRET: ${{ secrets.AWS_SECRET }}

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2-beta

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Restore node_modules
        uses: actions/cache@v1
        id: api-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-api-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Restore .npm cache
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-api-npm-cache-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            - ${{ runner.os }}-api-npm-cache-${{ hashFiles('package-lock.json') }}
            - ${{ runner.os }}-api-npm-cache-

      - name: Install dependencies
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - run: npm run lint:check

  prettier:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2-beta

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Restore node_modules
        uses: actions/cache@v1
        id: api-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-api-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Restore .npm cache
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-api-npm-cache-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            - ${{ runner.os }}-api-npm-cache-${{ hashFiles('package-lock.json') }}
            - ${{ runner.os }}-api-npm-cache-

      - name: Install dependencies
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - run: npm run prettier:check

  typescript:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2-beta

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Restore node_modules
        uses: actions/cache@v1
        id: api-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-api-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Restore .npm cache
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-api-npm-cache-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            - ${{ runner.os }}-api-npm-cache-${{ hashFiles('package-lock.json') }}
            - ${{ runner.os }}-api-npm-cache-

      - name: Install dependencies
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - run: npm run type:check

  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2-beta

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Restore node_modules
        uses: actions/cache@v1
        id: api-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-api-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Restore .npm cache
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-api-npm-cache-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            - ${{ runner.os }}-api-npm-cache-${{ hashFiles('package-lock.json') }}
            - ${{ runner.os }}-api-npm-cache-

      - name: Install dependencies
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: Cache build
        uses: actions/cache@v1
        with:
          path: dist
          key: ${{ runner.os }}-api-build-${{ github.sha }}

      - name: Build
        run: npm run build

  test:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: --entrypoint redis-server
      postgres:
        image: mdillon/postgis:9.6
        env:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v2-beta

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Restore node_modules
        uses: actions/cache@v1
        id: api-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-api-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Restore .npm cache
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-api-npm-cache-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            - ${{ runner.os }}-api-npm-cache-${{ hashFiles('package-lock.json') }}
            - ${{ runner.os }}-api-npm-cache-

      - name: Install dependencies
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - run: npm run db:setup

      - run: npm run test:run-with-coverage

      - run: npm run test:send-coverage
